// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/event/{org_uuid}": {
            "get": {
                "description": "Get events for a particular organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Org Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cyour_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Org uuid",
                        "name": "org_uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "description": "Create an event for a particular org",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create Event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cyour_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Org uuid",
                        "name": "org_uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Also needs 'event_image' which is a file",
                        "name": "event_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ReqEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/api/events": {
            "get": {
                "description": "Get a list of events going on",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cyour_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/api/orgs": {
            "get": {
                "description": "Get the organizations you are in",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Self Orgs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cyour_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/api/user": {
            "get": {
                "description": "Get data about self and events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Self",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cyour_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/auth/refresh": {
            "get": {
                "description": "Send in a valid refresh token (http only cookie) and get a new set of tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Refresh Tokens",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "Sign In User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sign In",
                "parameters": [
                    {
                        "description": "Username and Password",
                        "name": "Details",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserSignIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Sign Up User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sign Up",
                "parameters": [
                    {
                        "description": "Data required to create an account",
                        "name": "Details",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserSignUp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ReqEvent": {
            "type": "object",
            "properties": {
                "eventDate": {
                    "type": "string"
                },
                "eventDescription": {
                    "type": "string"
                },
                "eventLocation": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                }
            }
        },
        "dto.UserSignIn": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.UserSignUp": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Gamma User Api",
	Description:      "The api docs",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
