package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Eventapplication represents a row from 'public.eventapplications'.
type Eventapplication struct {
	Eventapplicationid int       `json:"eventapplicationid"` // eventapplicationid
	Userfk             int       `json:"userfk"`             // userfk
	Datecreated        time.Time `json:"datecreated"`        // datecreated
	Orgeventfk         int       `json:"orgeventfk"`         // orgeventfk
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Eventapplication exists in the database.
func (e *Eventapplication) Exists() bool {
	return e._exists
}

// Deleted returns true when the Eventapplication has been marked for deletion from
// the database.
func (e *Eventapplication) Deleted() bool {
	return e._deleted
}

// Insert inserts the Eventapplication to the database.
func (e *Eventapplication) Insert(ctx context.Context, db DB) error {
	switch {
	case e._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case e._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.eventapplications (` +
		`userfk, datecreated, orgeventfk` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING eventapplicationid`
	// run
	logf(sqlstr, e.Userfk, e.Datecreated, e.Orgeventfk)
	if err := db.QueryRowContext(ctx, sqlstr, e.Userfk, e.Datecreated, e.Orgeventfk).Scan(&e.Eventapplicationid); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Update updates a Eventapplication in the database.
func (e *Eventapplication) Update(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case e._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.eventapplications SET ` +
		`userfk = $1, datecreated = $2, orgeventfk = $3 ` +
		`WHERE eventapplicationid = $4`
	// run
	logf(sqlstr, e.Userfk, e.Datecreated, e.Orgeventfk, e.Eventapplicationid)
	if _, err := db.ExecContext(ctx, sqlstr, e.Userfk, e.Datecreated, e.Orgeventfk, e.Eventapplicationid); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Eventapplication to the database.
func (e *Eventapplication) Save(ctx context.Context, db DB) error {
	if e.Exists() {
		return e.Update(ctx, db)
	}
	return e.Insert(ctx, db)
}

// Upsert performs an upsert for Eventapplication.
func (e *Eventapplication) Upsert(ctx context.Context, db DB) error {
	switch {
	case e._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.eventapplications (` +
		`eventapplicationid, userfk, datecreated, orgeventfk` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (eventapplicationid) DO ` +
		`UPDATE SET ` +
		`userfk = EXCLUDED.userfk, datecreated = EXCLUDED.datecreated, orgeventfk = EXCLUDED.orgeventfk `
	// run
	logf(sqlstr, e.Eventapplicationid, e.Userfk, e.Datecreated, e.Orgeventfk)
	if _, err := db.ExecContext(ctx, sqlstr, e.Eventapplicationid, e.Userfk, e.Datecreated, e.Orgeventfk); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Delete deletes the Eventapplication from the database.
func (e *Eventapplication) Delete(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return nil
	case e._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.eventapplications ` +
		`WHERE eventapplicationid = $1`
	// run
	logf(sqlstr, e.Eventapplicationid)
	if _, err := db.ExecContext(ctx, sqlstr, e.Eventapplicationid); err != nil {
		return logerror(err)
	}
	// set deleted
	e._deleted = true
	return nil
}

// EventapplicationByEventapplicationid retrieves a row from 'public.eventapplications' as a Eventapplication.
//
// Generated from index 'eventapplications_pkey'.
func EventapplicationByEventapplicationid(ctx context.Context, db DB, eventapplicationid int) (*Eventapplication, error) {
	// query
	const sqlstr = `SELECT ` +
		`eventapplicationid, userfk, datecreated, orgeventfk ` +
		`FROM public.eventapplications ` +
		`WHERE eventapplicationid = $1`
	// run
	logf(sqlstr, eventapplicationid)
	e := Eventapplication{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, eventapplicationid).Scan(&e.Eventapplicationid, &e.Userfk, &e.Datecreated, &e.Orgeventfk); err != nil {
		return nil, logerror(err)
	}
	return &e, nil
}

// EventapplicationsByUserfk retrieves a row from 'public.eventapplications' as a Eventapplication.
//
// Generated from index 'eventapplicationsindex'.
func EventapplicationsByUserfk(ctx context.Context, db DB, userfk int) ([]*Eventapplication, error) {
	// query
	const sqlstr = `SELECT ` +
		`eventapplicationid, userfk, datecreated, orgeventfk ` +
		`FROM public.eventapplications ` +
		`WHERE userfk = $1`
	// run
	logf(sqlstr, userfk)
	rows, err := db.QueryContext(ctx, sqlstr, userfk)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Eventapplication
	for rows.Next() {
		e := Eventapplication{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&e.Eventapplicationid, &e.Userfk, &e.Datecreated, &e.Orgeventfk); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &e)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Organizationevent returns the Organizationevent associated with the Eventapplication's (Orgeventfk).
//
// Generated from foreign key 'eventapplications_orgeventfk_fkey'.
func (e *Eventapplication) Organizationevent(ctx context.Context, db DB) (*Organizationevent, error) {
	return OrganizationeventByOrganizationeventid(ctx, db, e.Orgeventfk)
}

// User returns the User associated with the Eventapplication's (Userfk).
//
// Generated from foreign key 'eventapplications_userfk_fkey'.
func (e *Eventapplication) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserid(ctx, db, e.Userfk)
}
