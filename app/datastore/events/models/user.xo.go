package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// User represents a row from 'public.users'.
type User struct {
	Userid   int    `json:"userid"`   // userid
	Useruuid string `json:"useruuid"` // useruuid
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the User has been marked for deletion from
// the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.users (` +
		`useruuid` +
		`) VALUES (` +
		`$1` +
		`) RETURNING userid`
	// run
	logf(sqlstr, u.Useruuid)
	if err := db.QueryRowContext(ctx, sqlstr, u.Useruuid).Scan(&u.Userid); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Update updates a User in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.users SET ` +
		`useruuid = $1 ` +
		`WHERE userid = $2`
	// run
	logf(sqlstr, u.Useruuid, u.Userid)
	if _, err := db.ExecContext(ctx, sqlstr, u.Useruuid, u.Userid); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the User to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for User.
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.users (` +
		`userid, useruuid` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (userid) DO ` +
		`UPDATE SET ` +
		`useruuid = EXCLUDED.useruuid `
	// run
	logf(sqlstr, u.Userid, u.Useruuid)
	if _, err := db.ExecContext(ctx, sqlstr, u.Userid, u.Useruuid); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.users ` +
		`WHERE userid = $1`
	// run
	logf(sqlstr, u.Userid)
	if _, err := db.ExecContext(ctx, sqlstr, u.Userid); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserByUserid retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserByUserid(ctx context.Context, db DB, userid int) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`userid, useruuid ` +
		`FROM public.users ` +
		`WHERE userid = $1`
	// run
	logf(sqlstr, userid)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userid).Scan(&u.Userid, &u.Useruuid); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UserByUseruuid retrieves a row from 'public.users' as a User.
//
// Generated from index 'useruuidindex'.
func UserByUseruuid(ctx context.Context, db DB, useruuid string) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`userid, useruuid ` +
		`FROM public.users ` +
		`WHERE useruuid = $1`
	// run
	logf(sqlstr, useruuid)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, useruuid).Scan(&u.Userid, &u.Useruuid); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
