package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// UserEvent represents a row from 'public.UserEvents'.
type UserEvent struct {
	UserEventID int `json:"UserEventID"` // UserEventID
	OrgEventFk  int `json:"OrgEventFk"`  // OrgEventFk
	UserFk      int `json:"UserFk"`      // UserFk
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the UserEvent exists in the database.
func (ue *UserEvent) Exists() bool {
	return ue._exists
}

// Deleted returns true when the UserEvent has been marked for deletion from
// the database.
func (ue *UserEvent) Deleted() bool {
	return ue._deleted
}

// Insert inserts the UserEvent to the database.
func (ue *UserEvent) Insert(ctx context.Context, db DB) error {
	switch {
	case ue._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ue._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.UserEvents (` +
		`OrgEventFk, UserFk` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING UserEventID`
	// run
	logf(sqlstr, ue.OrgEventFk, ue.UserFk)
	if err := db.QueryRowContext(ctx, sqlstr, ue.OrgEventFk, ue.UserFk).Scan(&ue.UserEventID); err != nil {
		return logerror(err)
	}
	// set exists
	ue._exists = true
	return nil
}

// Update updates a UserEvent in the database.
func (ue *UserEvent) Update(ctx context.Context, db DB) error {
	switch {
	case !ue._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ue._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.UserEvents SET ` +
		`OrgEventFk = $1, UserFk = $2 ` +
		`WHERE UserEventID = $3`
	// run
	logf(sqlstr, ue.OrgEventFk, ue.UserFk, ue.UserEventID)
	if _, err := db.ExecContext(ctx, sqlstr, ue.OrgEventFk, ue.UserFk, ue.UserEventID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the UserEvent to the database.
func (ue *UserEvent) Save(ctx context.Context, db DB) error {
	if ue.Exists() {
		return ue.Update(ctx, db)
	}
	return ue.Insert(ctx, db)
}

// Upsert performs an upsert for UserEvent.
func (ue *UserEvent) Upsert(ctx context.Context, db DB) error {
	switch {
	case ue._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.UserEvents (` +
		`UserEventID, OrgEventFk, UserFk` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (UserEventID) DO ` +
		`UPDATE SET ` +
		`OrgEventFk = EXCLUDED.OrgEventFk, UserFk = EXCLUDED.UserFk `
	// run
	logf(sqlstr, ue.UserEventID, ue.OrgEventFk, ue.UserFk)
	if _, err := db.ExecContext(ctx, sqlstr, ue.UserEventID, ue.OrgEventFk, ue.UserFk); err != nil {
		return logerror(err)
	}
	// set exists
	ue._exists = true
	return nil
}

// Delete deletes the UserEvent from the database.
func (ue *UserEvent) Delete(ctx context.Context, db DB) error {
	switch {
	case !ue._exists: // doesn't exist
		return nil
	case ue._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.UserEvents ` +
		`WHERE UserEventID = $1`
	// run
	logf(sqlstr, ue.UserEventID)
	if _, err := db.ExecContext(ctx, sqlstr, ue.UserEventID); err != nil {
		return logerror(err)
	}
	// set deleted
	ue._deleted = true
	return nil
}

// UserEventsByUserFk retrieves a row from 'public.UserEvents' as a UserEvent.
//
// Generated from index 'UserEventsIndex'.
func UserEventsByUserFk(ctx context.Context, db DB, userFk int) ([]*UserEvent, error) {
	// query
	const sqlstr = `SELECT ` +
		`UserEventID, OrgEventFk, UserFk ` +
		`FROM public.UserEvents ` +
		`WHERE UserFk = $1`
	// run
	logf(sqlstr, userFk)
	rows, err := db.QueryContext(ctx, sqlstr, userFk)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserEvent
	for rows.Next() {
		ue := UserEvent{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ue.UserEventID, &ue.OrgEventFk, &ue.UserFk); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ue)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserEventByUserEventID retrieves a row from 'public.UserEvents' as a UserEvent.
//
// Generated from index 'UserEvents_pkey'.
func UserEventByUserEventID(ctx context.Context, db DB, userEventID int) (*UserEvent, error) {
	// query
	const sqlstr = `SELECT ` +
		`UserEventID, OrgEventFk, UserFk ` +
		`FROM public.UserEvents ` +
		`WHERE UserEventID = $1`
	// run
	logf(sqlstr, userEventID)
	ue := UserEvent{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userEventID).Scan(&ue.UserEventID, &ue.OrgEventFk, &ue.UserFk); err != nil {
		return nil, logerror(err)
	}
	return &ue, nil
}

// OrganizationEvent returns the OrganizationEvent associated with the UserEvent's (OrgEventFk).
//
// Generated from foreign key 'UserEvents_OrgEventFk_fkey'.
func (ue *UserEvent) OrganizationEvent(ctx context.Context, db DB) (*OrganizationEvent, error) {
	return OrganizationEventByOrganizationEventID(ctx, db, ue.OrgEventFk)
}

// User returns the User associated with the UserEvent's (UserFk).
//
// Generated from foreign key 'UserEvents_UserFk_fkey'.
func (ue *UserEvent) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, ue.UserFk)
}
