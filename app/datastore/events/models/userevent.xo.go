package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Userevent represents a row from 'public.userevents'.
type Userevent struct {
	Usereventid int `json:"usereventid"` // usereventid
	Orgeventfk  int `json:"orgeventfk"`  // orgeventfk
	Userfk      int `json:"userfk"`      // userfk
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Userevent exists in the database.
func (u *Userevent) Exists() bool {
	return u._exists
}

// Deleted returns true when the Userevent has been marked for deletion from
// the database.
func (u *Userevent) Deleted() bool {
	return u._deleted
}

// Insert inserts the Userevent to the database.
func (u *Userevent) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.userevents (` +
		`orgeventfk, userfk` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING usereventid`
	// run
	logf(sqlstr, u.Orgeventfk, u.Userfk)
	if err := db.QueryRowContext(ctx, sqlstr, u.Orgeventfk, u.Userfk).Scan(&u.Usereventid); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Update updates a Userevent in the database.
func (u *Userevent) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.userevents SET ` +
		`orgeventfk = $1, userfk = $2 ` +
		`WHERE usereventid = $3`
	// run
	logf(sqlstr, u.Orgeventfk, u.Userfk, u.Usereventid)
	if _, err := db.ExecContext(ctx, sqlstr, u.Orgeventfk, u.Userfk, u.Usereventid); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Userevent to the database.
func (u *Userevent) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for Userevent.
func (u *Userevent) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.userevents (` +
		`usereventid, orgeventfk, userfk` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (usereventid) DO ` +
		`UPDATE SET ` +
		`orgeventfk = EXCLUDED.orgeventfk, userfk = EXCLUDED.userfk `
	// run
	logf(sqlstr, u.Usereventid, u.Orgeventfk, u.Userfk)
	if _, err := db.ExecContext(ctx, sqlstr, u.Usereventid, u.Orgeventfk, u.Userfk); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the Userevent from the database.
func (u *Userevent) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.userevents ` +
		`WHERE usereventid = $1`
	// run
	logf(sqlstr, u.Usereventid)
	if _, err := db.ExecContext(ctx, sqlstr, u.Usereventid); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UsereventByUsereventid retrieves a row from 'public.userevents' as a Userevent.
//
// Generated from index 'userevents_pkey'.
func UsereventByUsereventid(ctx context.Context, db DB, usereventid int) (*Userevent, error) {
	// query
	const sqlstr = `SELECT ` +
		`usereventid, orgeventfk, userfk ` +
		`FROM public.userevents ` +
		`WHERE usereventid = $1`
	// run
	logf(sqlstr, usereventid)
	u := Userevent{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, usereventid).Scan(&u.Usereventid, &u.Orgeventfk, &u.Userfk); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UsereventsByUserfk retrieves a row from 'public.userevents' as a Userevent.
//
// Generated from index 'usereventsindex'.
func UsereventsByUserfk(ctx context.Context, db DB, userfk int) ([]*Userevent, error) {
	// query
	const sqlstr = `SELECT ` +
		`usereventid, orgeventfk, userfk ` +
		`FROM public.userevents ` +
		`WHERE userfk = $1`
	// run
	logf(sqlstr, userfk)
	rows, err := db.QueryContext(ctx, sqlstr, userfk)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Userevent
	for rows.Next() {
		u := Userevent{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&u.Usereventid, &u.Orgeventfk, &u.Userfk); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &u)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Organizationevent returns the Organizationevent associated with the Userevent's (Orgeventfk).
//
// Generated from foreign key 'userevents_orgeventfk_fkey'.
func (u *Userevent) Organizationevent(ctx context.Context, db DB) (*Organizationevent, error) {
	return OrganizationeventByOrganizationeventid(ctx, db, u.Orgeventfk)
}

// User returns the User associated with the Userevent's (Userfk).
//
// Generated from foreign key 'userevents_userfk_fkey'.
func (u *Userevent) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserid(ctx, db, u.Userfk)
}
